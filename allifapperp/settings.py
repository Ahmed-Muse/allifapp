"""
Django settings for allifapperp project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os

from pathlib import Path
#from dotenv import load_dotenv

# Load environment variables from .env file
#load_dotenv()
#allif_get_env_var= os.environ.get

#BASE_DIR = Path(__file__).parent.parent.parent 

#load_dotenv(BASE_DIR / "../.env") #here you indicate where your .env file is
#env_path = load_dotenv(os.path.join(BASE_DIR, './vvvdd/.env'))
#load_dotenv(env_path)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent # This variable correctly points to your myproject/ root directory (where manage.py resides).


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-c8*_cv^aw$^%(*k5zfx1+(svx3yw!448%^=ci6auje3ucz7gvn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# Add a setting for maintenance mode

#if DEBUG:
    #STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
#else:
    #STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
#DEBUG = os.environ.get('ALLIF_DJANGO_DEBUG', '')
#ALLOWED_HOSTS = ['ahmeddove.pythonanywhere.com','www.allifapp.com','allifapp.com/','127.0.0.1','localhost','http://0.0.0.0:8000/']


ALLOWED_HOSTS=[
     'ahmeddove.pythonanywhere.com','www.allifapp.com','allifapp.com',
    '127.0.0.1','localhost','http://0.0.0.0:8000/',
    'localhost',
    '127.0.0.1',
    '.localhost',  # The leading dot makes this a wildcard for all subdomains
     'allifmaal.localhost',
    '.allifapp.com'
    'testserver',
    # For a production environment, you would use something like:
    # '.yourdomain.com'
    # 'www.yourdomain.com'
    # 'api.yourdomain.com'
]
SECRET_KEY ='sfsdfsjljgouduoetoej$%5gkkkjhhytfjh$django-insecure-c8*_cv^aw$^%(*k5zfx1+(svx3yw!448%^=ci6auje3ucz7gvn'
#SECRET_KEY =allif_get_env_var("ALLIF_DJANGO_SECRET_KEY")
#EMAIL_BACKEND=allif_get_env_var("ALLIF_EMAIL_BACKEND","email-backend")
#EMAIL_HOST=allif_get_env_var('ALLIF_EMAIL_HOST','email-host')
#EMAIL_PORT=allif_get_env_var('ALLIF_EMAIL_PORT','email-port')
#EMAIL_USE_TLS=allif_get_env_var('ALLIF_EMAIL_USE_TLS','email-use-tls')
#EMAIL_HOST_USER=allif_get_env_var('ALLIF_EMAIL_HOST_USER','email-host-user')
#EMAIL_HOST_PASSWORD=allif_get_env_var('ALLIF_EMAIL_HOST_PASSWORD','email-host-password')


############### uncomment below for production ################
#SECURE_HSTS_SECONDS = 31536000
#SECURE_HSTS_INCLUDE_SUBDOMAINS = True
#SECURE_SSL_REDIRECT = True# Set this to true in production
#SESSION_COOKIE_SECURE = True
#SECURE_HSTS_PRELOAD = True
#CSRF_COOKIE_SECURE = True


# Application definition
#EMAIL_HOST = os.getenv("EMAIL_HOST")


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'import_export',
    "django.contrib.humanize",
    'crispy_forms',
    
    
    "allifmaalusersapp",
    
     "allifmaaladminapp",
     "allifmaalcommonapp",
     "allifmaalhotelsapp",
     "allifmaalilmapp",
     "allifmaalrealestateapp",
     "allifmaalsalesapp",
     "allifmaalservicesapp",
     "allifmaalshaafiapp",
     "allifmaallogisticsapp",
     
     ########## django hosts...
      # ...
    'django.contrib.sites',  # Required for django-hosts
    'django_hosts',
    # ... your other apps
   
  
]

ROOT_HOSTCONF = 'allifapperp.hosts' # Path to your hosts.py file
DEFAULT_HOST = 'public' # Name o

# This is a list of subdomains to be considered "public" and not tenant-specific.
PUBLIC_SUBDOMAINS = [
    'www',
    'localhost',
    '127',
    'testserver',
    # Add any other public subdomains here
]
# --- End of Domain Configuration ---


# Set the site ID. This can be configured in the admin later.
SITE_ID = 1

# The URL for your public-facing site.

# A single string for the public domain. Your original setting was a list, which is incorrect.
PUBLIC_DOMAIN = ['localhost:8000','allifapp.com'] # Change to 'allifapp.com' for production


 # Change to 'allifapp.com' for production
# --- End of Domain Configuration ---

# ... other settings ...


MIDDLEWARE = [
    'django_hosts.middleware.HostsRequestMiddleware', # Must be first... this is for django hosts...03/08/2025
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    'allifmaalcommonapp.signals.CurrentUserMiddleware', # Add your custom middleware here
    'allifmaalcommonapp.middleware.AllifmaalTenantMiddleware',
    #'allifmaalcommonapp.domains.CompanySubdomainMiddleware',# this is to create sub domains
    #'allifmaalcommonapp.domains.CompanySubdomainMiddlewareByDjangoHosts',# this is to create sub domains
    #'django_auto_logout.middleware.AutoLogoutMiddleware',
    
]

#ROOT_URLCONF = 'allifapperp.urls'############ previous working one without sub domains issues.
# this ROOT_URLCONF = 'allifapperp.urls is replaced now with ROOT_URLCONF = 'allifapperp.urls.public' below...
# The default URL configuration for the 'public' host.
ROOT_URLCONF = 'allifapperp.urls.public'

# ... (rest of your settings) ...
LOGIN_URL = 'allifmaalusersapp:userLoginPage'
# below is for auto logout when there is inactivity... there is two ways to do it as below.
#AUTO_LOGOUT = {'IDLE_TIME': 60}  # logout after 10 minutes of downtime
from datetime import timedelta
AUTO_LOGOUT = {
    'IDLE_TIME': timedelta(minutes=60),
    'allifmaalusersapp:userLoginPage': True,
    
    'REDIRECT_TO_LOGIN_IMMEDIATELY': False, # Optional: Set to True to redirect immediately
}

# django_project/settings.py
LOGIN_REDIRECT_URL="home"
LOGOUT_REDIRECT_URL="home"


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'allifmaalcommonapp.preprocessor.allifmaalcommonappglobalVariables',
                'allifmaalcommonapp.preprocessor.allifUserSessions',
                #'allifmaalcommonapp.context_processors.your_company_context', # <--- Make sure this is here
            ],
             'libraries': {
                # --- NEW: Register your custom UI template tags ---
                #'erp_ui_tags': 'allifmaalcommonapp.templatetags.erp_ui_tags',
                # --- END NEW ---
                # Keep any other libraries you've registered (e.g., 'config_tags')
                # 'config_tags': 'allifmaalcommonapp.templatetags.config_tags',
            },
        },
    },
]

WSGI_APPLICATION = 'allifapperp.wsgi.application'



# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        ############ Unccoment below during deployemnt ###############
        #'ENGINE': 'django.db.backends.mysql',
        #'NAME': 'Ahmeddove$allifmysqlcommondb',# thi is the db name in the pythonanywhere database.
        #'USER': 'Ahmeddove',
        #'PASSWORD': 'Allif@6030114',# this is the MYSQL password in pythonanywhere
        #'HOST': 'Ahmeddove.mysql.pythonanywhere-services.com',# this is db host name from pythonanywhere
        #'PORT': '3306',

        ################# comment out this section during deployment... it is for development ############
        #'ENGINE': 'django.db.backends.mysql',
        #'NAME': 'allifmysqlcommondb',# this is the name of the database
        #'HOST': 'localhost',
        #'USER': 'root',
        #'PASSWORD': 'Allif@1442',# Allif@6030114
        #'PORT': '3306',
        #'OPTIONS': {'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",}
        #'PASSWORD': 'hidden',
       


        ######################3 BELOW DATABASE IS FOR PRODUCTION ############3

        ################# comment out this section during deployment... it is for development ############
        
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'Ahmeddove$allifmysqlcommondb',# this is the name of the database
        'USER': 'Ahmeddove',
        'PASSWORD': 'Allif@6030114',# Allif@6030114
        'HOST': 'Ahmeddove.mysql.pythonanywhere-services.com',
        'PORT': '3306',
        'OPTIONS': {'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",}
        #DEBUG=TRUE############ SET THIS FALSE
        
        ##############3 SQLITE3 SECTION ######################3
        ##### uncomment below if you want to use sqlite3--- this can work for both development and deployemnt
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': BASE_DIR / 'db.sqlite3',
       
    }
}  


"""
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.environ.get('DB_NAME'),
        "USER": os.environ.get('DB_USER'),
        "PASSWORD": os.environ.get('DB_USER_PASSWORD'),
        "HOST": os.environ.get('DB_HOST'),
        "PORT": os.environ.get('DB_PORT'),
    }
}
"""

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# --- IMPORTANT: Custom User Model ---
# This tells Django to use your User model instead of the default.
# MUST be set before running migrations for the first time.
AUTH_USER_MODEL = 'allifmaalusersapp.User' # Using your User model name
############3 START... THIS SECTION WAS ADDED BECAUSE OF SIGNALS....################3
# your_project/settings.py


# --- Caching Configuration (Example using local-memory cache) ---
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'erp-unique-cache-key', # Unique string for this cache instance
    }
}

# --- Logging Configuration ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': { # Add a file handler for more persistent logs... add logs folder in same level as manage.py
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'allifapp_erp_logs.log'),
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'root': { # Default logger for anything not caught by specific loggers
        'handlers': ['console', 'file'],
        'level': 'WARNING',
    },
    #'loggers': {
        #'django': { # Django's internal logger
            #'handlers': ['console', 'file'],
            #'level': 'ERROR',
            #'propagate': False,
        #},
        #'allifmaalcommonapp': { # Specific logger for your app's messages
            #'handlers': ['console', 'file'],
            #'level': 'DEBUG', # Set to DEBUG during development for more detail
            #'propagate': False,
        #},
    #},
}

############ END.... THIS SECTION WAS ADDED BECAUSE OF SIGNALS ########################
# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# comments
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
#PATH WHERE UPLOADED FILES WILL BE STORED...in the media folder
MEDIA_ROOT=os.path.join(BASE_DIR,'static/media')
MEDIA_URL='/media/'#fetch images/media using this path when viewing through the browser...this folder will be created automatically when we upload the first image

#SENDSMS_BACKEND = 'allifmaalusersapp.mysmsbackend.SmsBackend'

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Mogadishu'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'## This is the URL prefix for static files (e.g., yoursite.com/static/css/base.css)
#STATIC_ROOT='static'
#STATICFILES_LOCATION='static'

#This constructs the absolute path to the static folder located directly within in project's root.
#This is the absolute path to a directory where python manage.py collectstatic will gather all static files from your project (from STATICFILES_DIRS and from each app's static/ directory) into one place for deployment. You typically don't serve files directly from STATIC_ROOT in development.
#STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
STATICFILES_LOCATION='static'

#By adding this path to STATICFILES_DIRS, we are telling Django:
#  "Hey, when you're looking for static files, also check inside the static folder at the project root."
## This is the crucial part for common static files.
# STATICFILES_DIRS tells Django where to look for additional static files
# that are *not* inside an app's 'static' sub-directory.
#STATICFILES_DIRS: This is a list of directories where Django's staticfiles app will look for static files in addition to the static/ subdirectory of each app.
#  This is exactly what you need for your common styling.
STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'static'),
    #os.path.join(BASE_DIR,'allif'),
]

MEDIA_ROOT=os.path.join(BASE_DIR,'static/media')
#PATH WHERE UPLOADED FILES WILL BE STORED...in the media folder
MEDIA_URL='/media/'#fetch images/media using this path when viewing through the browser...this folder will be created automatically when we upload the first image


